#!/usr/bin/env ruby

require 'shellwords'
require 'fileutils'


# master2: { path: "/home/gnufied/vagrants/kube_master2", hostname: "xaos.master2.lan" },

hosts = {
  master: {
    path: "/home/gnufied/vagrants/kube_master",
    hostname: "xaos.master.lan",
    ip: "192.168.1.60"
  },
  node1: {
    path: "/home/gnufied/vagrants/kube_node1", hostname: "xaos.node1.lan",
    ip: "192.168.33.11"
  },
  node2: {
    path: "/home/gnufied/vagrants/kube_node2", hostname: "xaos.node2.lan",
    ip: "192.168.33.12"
  }
}

cmd_arg = ARGV[0].strip rescue "default"

def set_hostname(vagrant_path, hostname)
  FileUtils.cd(vagrant_path) do
    hostname_args = ["vagrant", "ssh", "-c", "sudo hostnamectl set-hostname #{hostname}"]
    hostname_command = Shellwords.join(hostname_args)
    system(hostname_command)
  end
end

def restart_master(vagrant_path, hostname)
  %w(kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet etcd).each do |service|
    puts "Restarting #{service} on #{hostname}"
    FileUtils.cd(vagrant_path) do
      stop_args = ["vagrant", "ssh", "-c", "sudo systemctl stop #{service}"]
      stop_cmd = Shellwords.join(stop_args)
      system(stop_cmd)

      start_args = ["vagrant", "ssh", "-c", "sudo systemctl start #{service}"]
      start_cmd = Shellwords.join(start_args)
      system(start_cmd)
    end
  end
end

def start_docker_registry
  docker_reg_command =<<-EOD
docker run -d -p 5000:5000 --restart=always --name registry \
  -v /home/gnufied/docker_files:/var/lib/registry \
  registry:2
  EOD
  system(docker_reg_command)
end

def ssh_to_host(host_path)
  FileUtils.cd(host_path) do
    system("vagrant ssh")
  end
end

def up_provision(node_name, node_dict)
  FileUtils.cd(node_dict[:path]) do
    system("vagrant up")
    set_hostname(node_dict[:path], node_dict[:hostname])
    ifconfig = `vagrant ssh -c ifconfig`
    if ifconfig.include?(node_dict[:ip])
      system("vagrant provision")
      return true
    else
      system("vagrant reload")
      update_ifconfig = `vagrant ssh -c ifconfig`
      if update_ifconfig.include?(node_dict[:ip])
        system("vagrant provision")
        return true
      else
        return false
      end
    end
  end
end

case cmd_arg
when "up"
  start_docker_registry()
  sleep(2)

  hosts.each do |node_name, data_dict|
    if !up_provision(node_name, data_dict)
      puts "Bringing up node #{node_name} failed, fix before continuing"
      break
    end
  end
when "reload"
  hosts.each do |node_name, data_dict|
    system("cd #{data_dict[:path]} && vagrant reload --provision")
    set_hostname(data_dict[:path], data_dict[:hostname])
  end
when "provision"
  hosts.each do |node_name, data_dict|
    set_hostname(data_dict[:path], data_dict[:hostname])
    system("cd #{data_dict[:path]} && vagrant provision")
  end
when "hostname"
  hosts.each do |node_name, data_dict|
    set_hostname(data_dict[:path], data_dict[:hostname])
  end
when "restart_master"
  master_name = (ARGV[1].strip).to_sym
  restart_master(hosts[master_name][:path], hosts[master_name][:hostname])
when 'registry'
  start_docker_registry()
when 'ssh'
  node_name = (ARGV[1].strip).to_sym
  host_path = hosts[node_name][:path]
  puts "SSHing to #{host_path}"
  ssh_to_host(host_path)
when 'halt'
  hosts.each do |node_name, data_dict|
    puts "Attempting shutdown of #{node_name}"
    system("cd #{data_dict[:path]} && vagrant halt")
  end
when 'nuke'
  hosts.each do |node_name, data_dict|
    puts "Attempting to nuke #{node_name}"
    system("cd #{data_dict[:path]} && vagrant destroy --force")
  end
else
  puts "please specify one of the following : up, reload, provision, restart_master, registry"
end
