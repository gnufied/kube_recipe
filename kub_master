#!/usr/bin/env ruby

require 'fileutils'

master_ip = "192.168.1.60"


etc_conf =<<-EOD
ETCD_NAME=default
ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:4001"
ETCD_LISTEN_PEER_URLS="http://localhost:2380"
ETCD_ADVERTISE_CLIENT_URLS="http://0.0.0.0:4001"
EOD

File.open("/etc/etcd/etcd.conf", "w") do |fl|
  fl.write(etc_conf)
end

kub_conf =<<EOD
KUBE_ETCD_SERVERS="--etcd_servers=http://#{master_ip}:4001"

KUBE_LOGTOSTDERR="--logtostderr=true"

# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"

# Should this cluster be allowed to run privileged docker containers. REQUIRED for advanced volumes like Gluster and CEPH
KUBE_ALLOW_PRIV="--allow_privileged=true"

# How the controller-manager, scheduler, and proxy find the apiserver
KUBE_MASTER="--master=http://xaos.master.lan:8080"
EOD

File.open("/etc/kubernetes/config", "w")  do |fl|
  fl.write(kub_conf)
end

api_server_conf =<<-EOD
KUBE_API_ADDRESS="--address=0.0.0.0"

# The port on the local server to listen on.
# KUBE_API_PORT="--port=8080"

# Port minions listen on
# KUBELET_PORT="--kubelet_port=10250"

# Comma separated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS="--etcd_servers=http://#{master_ip}:4001"

# Address range to use for services
KUBE_SERVICE_ADDRESSES="--portal_net=10.254.0.0/16"

# default admission control policies
# KUBE_ADMISSION_CONTROL="--admission_control=NamespaceAutoProvision,LimitRanger,ResourceQuota"

# API level v1beta3 required for Gluster and CEPH
KUBE_API_ARGS=""
EOD

File.open("/etc/kubernetes/apiserver", "w") do |fl|
  fl.write(api_server_conf)
end

kubelet_config =<<-EOD
# The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)
KUBELET_ADDRESS="--address=0.0.0.0"

# The port for the info server to serve on
# KUBELET_PORT="--port=10250"

# You may leave this blank to use the actual hostname
KUBELET_HOSTNAME="--hostname_override=xaos.master.lan"

#API Server
# location of the api-server
KUBELET_API_SERVER="--api_servers=http://xaos.master.lan:8080"

KUBELET_ARGS=""
EOD

File.open("/etc/kubernetes/kubelet", "w") do |fl|
  fl.write(kubelet_config)
end

kube_proxy_config =<<-EOD
# default config should be adequate

# Add your own!
KUBE_PROXY_ARGS=""
EOD

File.open("/etc/kubernetes/proxy", "w") do |fl|
  fl.write(kube_proxy_config)
end



kube_controller_config =<<-EOD
# Comma separated list of minions
KUBELET_ADDRESSES="--machines=xaos.master.lan"
# Add you own!
KUBE_CONTROLLER_MANAGER_ARGS=""
EOD

File.open("/etc/kubernetes/controller-manager", "w") do |fl|
  fl.write(kube_controller_config)
end


kube_scheduler_config =<<-EOD
###
# kubernetes scheduler config
# default config should be adequate

# Add your own!
KUBE_SCHEDULER_ARGS=""
EOD


File.open("/etc/kubernetes/scheduler", "w") do |fl|
  fl.write(kube_scheduler_config)
end

%w(kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet etcd).each do |service|
  system("systemctl stop #{service}")
  system("systemctl start #{service}")
end


kube_dashboard_data =<<-EOD
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubernetes-dashboard
  template:
    metadata:
      labels:
        app: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard
        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.4.0-beta2
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
          protocol: TCP
        args:
          # Uncomment the following line to manually specify Kubernetes API server Host
          # If not specified, Dashboard will attempt to auto discover the API server and connect
          # to it. Uncomment only if the default does not work.
          - --apiserver-host=http://xaos.master.lan:8080
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 9090
  selector:
    app: kubernetes-dashboard

EOD

File.open("dashboard.yaml", "w") do |fl|
  fl.write(kube_dashboard_data)
end
