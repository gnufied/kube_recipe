#!/usr/bin/env ruby

require 'shellwords'
require 'fileutils'


# master2: { path: "/home/gnufied/vagrants/kube_master2", hostname: "xaos.master2.lan" },

hosts = {
  master: { path: "/home/gnufied/vagrants/kube_master", hostname: "xaos.master.lan" },
  node1: { path: "/home/gnufied/vagrants/kube_node2", hostname: "xaos.node1.lan" },
  node2: { path: "/home/gnufied/vagrants/kube_node2", hostname: "xaos.node2.lan" },
}

cmd_arg = ARGV[0].strip

def set_hostname(vagrant_path, hostname)
  FileUtils.cd(vagrant_path) do
    hostname_args = ["vagrant", "ssh", "-c", "sudo hostnamectl set-hostname #{hostname}"]
    hostname_command = Shellwords.join(hostname_args)
    system(hostname_command)
  end
end

def restart_master(vagrant_path, hostname)
  %w(kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet etcd).each do |service|
    puts "Restarting #{service} on #{hostname}"
    FileUtils.cd(vagrant_path) do
      stop_args = ["vagrant", "ssh", "-c", "sudo systemctl stop #{service}"]
      stop_cmd = Shellwords.join(stop_args)
      system(stop_cmd)

      start_args = ["vagrant", "ssh", "-c", "sudo systemctl start #{service}"]
      start_cmd = Shellwords.join(start_args)
      system(start_cmd)
    end
  end
end

def start_docker_registry
  docker_reg_command =<<-EOD
docker run -d -p 5000:5000 --restart=always --name registry \
  -v /home/gnufied/docker_files:/var/lib/registry \
  registry:2
  EOD
  system(docker_reg_command)
end

case cmd_arg
when "up"
  start_docker_registry()
  sleep(2)
  hosts.each do |node_name, data_dict|
    system("cd #{data_dict[:path]} && vagrant up")
    set_hostname(data_dict[:path], data_dict[:hostname])
  end
when "reload"
  hosts.each do |node_name, data_dict|
    system("cd #{data_dict[:path]} && vagrant reload --provision")
    set_hostname(data_dict[:path], data_dict[:hostname])
  end
when "provision"
  hosts.each do |node_name, data_dict|
    set_hostname(data_dict[:path], data_dict[:hostname])
    system("cd #{data_dict[:path]} && vagrant provision")
  end
when "hostname"
  hosts.each do |node_name, data_dict|
    set_hostname(data_dict[:path], data_dict[:hostname])
  end
when "restart_master"
  master_name = (ARGV[1].strip).to_sym
  restart_master(hosts[master_name][:path], hosts[master_name][:hostname])
when 'registry'
  start_docker_registry()
end
